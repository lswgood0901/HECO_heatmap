{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../src/assets/20220408155705.webm';\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"container\"\n}, [/*#__PURE__*/_createCommentVNode(\" <canvas class=\\\"canvas\\\" id=\\\"myCanvas\\\" width=\\\"1520\\\" height=\\\"720\\\"></canvas> \"), /*#__PURE__*/_createElementVNode(\"svg\", {\n  id: \"mySvg\",\n  width: \"1520\",\n  height: \"720\"\n}), /*#__PURE__*/_createElementVNode(\"video\", {\n  autoplay: \"true\",\n  class: \"video\",\n  id: \"myVideo\",\n  src: _imports_0,\n  width: \"1520\",\n  height: \"720\"\n})], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <button type=\\\"button\\\" @click=\\\"vid_play_pause()\\\">Play/Pause</button>\\n  <button type=\\\"button\\\" @click=\\\"currentFrame()\\\">frame?</button> \"), _hoisted_1], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";OASsDA,gBAAuC;;gCAL3FC,oBAMM,KANN,EAMM;AANDC,OAAK,EAAC;AAML,CANN,EAAsB,cAEpBC,yGAFoB,eAGpBF,oBACM,KADN,EACM;AADDG,IAAE,EAAC,OACF;AADUC,OAAK,EAAC,MAChB;AADuBC,QAAM,EAAC;AAC9B,CADN,CAHoB,eAKpBL,oBAA6H,OAA7H,EAA6H;AAAtHM,UAAQ,EAAC,MAA6G;AAAtGL,OAAK,EAAC,OAAgG;AAAxFE,IAAE,EAAC,SAAqF;AAA3EI,KAAuC,EAAvCR,UAA2E;AAAnCK,OAAK,EAAC,MAA6B;AAAtBC,QAAM,EAAC;AAAe,CAA7H,CALoB,CAAtB;;AAAA;;;6DAFAH,uKAEAM","names":["_imports_0","_createElementVNode","class","_createCommentVNode","id","width","height","autoplay","src","_hoisted_1"],"sourceRoot":"","sources":["C:\\Users\\admin\\Desktop\\cctv\\cctvui\\src\\App.vue"],"sourcesContent":["<template>\n\n  <!-- <button type=\"button\" @click=\"vid_play_pause()\">Play/Pause</button>\n  <button type=\"button\" @click=\"currentFrame()\">frame?</button> -->\n  <div class=\"container\">\n\n    <!-- <canvas class=\"canvas\" id=\"myCanvas\" width=\"1520\" height=\"720\"></canvas> -->\n    <svg id=\"mySvg\" width=\"1520\" height=\"720\">\n    </svg>\n    <video autoplay=\"true\" class=\"video\" id=\"myVideo\" src=\"../src/assets/20220408155705.webm\" width=\"1520\" height=\"720\" ></video>\n  </div>\n  \n</template>\n\n<script>\nimport csvFile from 'raw-loader!./assets/data_0408_152650.csv';\nimport * as d3 from 'd3'; \n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      myData: [],\n      currentTime:0,\n      width: 1520,\n      height: 720,\n      maxNum: 0,\n      gridX:32,\n      gridY:16,\n    }\n  },\n  created() {\n    this.myData = csvFile\n  },\n  methods: {\n    vid_play_pause: () =>{\n      let myVideo = document.getElementById(\"myVideo\"); \n      if (myVideo.paused) { \n        myVideo.play(); \n        } else { \n          myVideo.pause();\n        }\n\n    },\n    currentFrame: () => {\n      let myVideo = document.getElementById(\"myVideo\"); \n      let currentTime = myVideo.currentTime\n      // console.log(currentTime)\n        return currentTime\n    },\n    initPosInGrid(x,y) {\n      let posInGrid = new Array(x);\n      for(let i=0; i<x; i++){\n        posInGrid[i] = new Array(y);\n        for(let j=0; j<y; j++) {\n          posInGrid[i][j] = 0;\n        }\n      }\n      return posInGrid\n    },\n    findMax(posInGrid,x) {\n      let tempMax=0;\n      for(let i=0;i<x;i++){\n        if(tempMax < Math.max(...posInGrid[i])){\n          tempMax = Math.max(...posInGrid[i])\n        }\n      }\n      return tempMax\n    },\n    calPosInGrid(posInGrid,x,y,length,data,width,height) {\n      for(let i =0; i<length; i++){\n        if(data[i].length >=4){\n          for(let j=4; j<data[i].length; j+=3){\n            for(let a=0; a<x; a++){\n              for(let b=0; b<y; b++){\n                // console.log(data[i][j])\n                if((data[i][j]>=a*width/x)&&(data[i][j]<(a+1)*width/x)){\n                  if((data[i][j+1] >= b*height/y) && (data[i][j+1] < (b+1)*height/y)){\n                    posInGrid[a][b] = posInGrid[a][b] + 1\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      console.log(posInGrid)\n      return posInGrid\n    }\n  },\n  watch: {\n   currentTime() {\n\n    //  console.log(this.currentTime)\n   }\n  },\n  mounted() {\n    setInterval(()=>{\n      this.currentTime = this.currentFrame()\n    },200)\n\n    let dataArray1 = new Array\n    let dataArray2 = new Array\n    dataArray1 = this.myData.split('\\n')\n    for (let i = 0; i < dataArray1.length; i++) {\n      dataArray2[i] = dataArray1[i].split(',')\n    }\n    const mySvg = d3.select(\"#mySvg\").style(\"border-width\", \"0.5px\");\n\n    mySvg.append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", this.width)\n      .attr(\"height\", this.height)\n      .style(\"fill\", \"150\")\n      .attr(\"opacity\", 0.5)\n\n    for (let i = 0; i < this.gridX; i++) {\n      mySvg.append(\"line\")\n        .attr(\"x1\", i*this.width/this.gridX)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", i*this.width/this.gridX)\n        .attr(\"y2\", this.height)\n        .style(\"stroke\", \"grey\")\n        .style(\"stroke-width\", \"1px\")\n    }\n    for (let i = 0; i < this.gridY; i++) {\n      mySvg.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", i*this.height/this.gridY)\n        .attr(\"x2\", this.width)\n        .attr(\"y2\", i*this.height/this.gridY)\n        .style(\"stroke\", \"grey\")\n        .style(\"stroke-width\", \"1px\")\n    }\n    let posInGrid = this.initPosInGrid(this.gridX,this.gridY)\n    posInGrid = this.calPosInGrid(posInGrid,this.gridX,this.gridY,dataArray1.length,dataArray2,this.width,this.height)\n    this.maxNum = this.findMax(posInGrid,this.gridX)\n    console.log(this.maxNum)\n    let mapOpacity = d3.scaleLinear()\n      .domain([0,1])\n      .range([0.1,1])\n    \n    for(let i=0; i<this.gridX; i++){\n      for(let j=0; j<this.gridY; j++){\n        mySvg.append(\"rect\")\n          .attr(\"x\",i*this.width/this.gridX)\n          .attr(\"y\",j*this.height/this.gridY)\n          .attr(\"width\", this.width/this.gridX)\n          .attr(\"height\", this.height/this.gridY)\n          .style(\"fill\", \"#FFA500\")\n          .style(\"opacity\", ()=>{\n            if(posInGrid[i][j]/this.maxNum != 0){\n              return mapOpacity(posInGrid[i][j]/this.maxNum)\n            } else {\n              return 0\n            }\n          })\n          .style(\"mix-blend-mode\", \"screen\")\n        console.log(posInGrid[i][j]/this.maxNum)\n      }\n    }\n    document.querySelector('video').playbackRate = 10;\n    \n  },\n    \n\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.container {\n    width:100%;\n    height:100%;\n    background:#000;\n    position:relative;\n  }\n#mySvg {\n  position: absolute;\n  top:0;\n  left:0;\n  z-index: 10;\n}\n.video {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n/* .canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  background-color:rgba(70, 40, 151, 0.5);\n} */\n</style>\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import csvFile from 'raw-loader!./assets/data_0408_152650.csv';\nimport * as d3 from 'd3';\nexport default {\n  name: 'App',\n  components: {},\n\n  data() {\n    return {\n      myData: [],\n      currentTime: 0,\n      width: 1520,\n      height: 720\n    };\n  },\n\n  created() {\n    this.myData = csvFile;\n  },\n\n  methods: {\n    vid_play_pause: () => {\n      let myVideo = document.getElementById(\"myVideo\");\n\n      if (myVideo.paused) {\n        myVideo.play();\n      } else {\n        myVideo.pause();\n      }\n    },\n    currentFrame: () => {\n      let myVideo = document.getElementById(\"myVideo\");\n      let currentTime = myVideo.currentTime;\n      console.log(currentTime);\n      return currentTime;\n    },\n\n    initPosInGrid(x, y) {\n      let posInGrid = new Array(x);\n\n      for (let i = 0; i < x; i++) {\n        posInGrid[i] = new Array(y);\n\n        for (let j = 0; j < y; j++) {\n          posInGrid[i][j] = 0;\n        }\n      }\n\n      return posInGrid;\n    },\n\n    findMax(posInGrid, x) {\n      let tempMax = 0;\n\n      for (let i = 0; i < x; i++) {\n        if (tempMax < Math.max(...posInGrid[i])) {\n          tempMax = Math.max(...posInGrid[i]);\n        }\n      }\n\n      return tempMax;\n    },\n\n    calPosInGrid(x, y) {}\n\n  },\n  watch: {\n    currentTime() {\n      console.log(this.currentTime);\n    }\n\n  },\n\n  mounted() {\n    setInterval(() => {\n      this.currentTime = this.currentFrame();\n    }, 200);\n    let gridX = 32;\n    let gridY = 16;\n    let dataArray1 = new Array();\n    let dataArray2 = new Array();\n    dataArray1 = this.myData.split('\\n');\n\n    for (let i = 0; i < dataArray1.length; i++) {\n      dataArray2[i] = dataArray1[i].split(',');\n    }\n\n    const mySvg = d3.select(\"#mySvg\").style(\"border-width\", \"0.5px\");\n    mySvg.append(\"rect\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", this.width).attr(\"height\", this.height).style(\"fill\", \"150\").attr(\"opacity\", 0.5);\n\n    for (let i = 0; i < gridX; i++) {\n      mySvg.append(\"line\").attr(\"x1\", i * this.width / gridX).attr(\"y1\", 0).attr(\"x2\", i * this.width / gridX).attr(\"y2\", this.height).style(\"stroke\", \"grey\").style(\"stroke-width\", \"1px\");\n    }\n\n    for (let i = 0; i < gridY; i++) {\n      mySvg.append(\"line\").attr(\"x1\", 0).attr(\"y1\", i * this.height / gridY).attr(\"x2\", this.width).attr(\"y2\", i * this.height / gridY).style(\"stroke\", \"grey\").style(\"stroke-width\", \"1px\");\n    }\n\n    let posInGrid = this.initPosInGrid(gridX, gridY);\n  }\n\n};","map":{"version":3,"mappings":"AAcA,OAAOA,OAAP,MAAoB,0CAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,eAAe;AACbC,MAAI,EAAE,KADO;AAEbC,YAAU,EAAE,EAFC;;AAIbC,MAAI,GAAG;AACL,WAAO;AACLC,YAAM,EAAE,EADH;AAELC,iBAAW,EAAC,CAFP;AAGLC,WAAK,EAAE,IAHF;AAILC,YAAM,EAAE;AAJH,KAAP;AAMD,GAXY;;AAYbC,SAAO,GAAG;AACR,SAAKJ,MAAL,GAAcL,OAAd;AACD,GAdY;;AAebU,SAAO,EAAE;AACPC,kBAAc,EAAE,MAAK;AACnB,UAAIC,OAAM,GAAIC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;;AACA,UAAIF,OAAO,CAACG,MAAZ,EAAoB;AAClBH,eAAO,CAACI,IAAR;AACA,OAFF,MAES;AACLJ,eAAO,CAACK,KAAR;AACF;AAEH,KATM;AAUPC,gBAAY,EAAE,MAAM;AAClB,UAAIN,OAAM,GAAIC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACA,UAAIR,WAAU,GAAIM,OAAO,CAACN,WAA1B;AACAa,aAAO,CAACC,GAAR,CAAYd,WAAZ;AACE,aAAOA,WAAP;AACH,KAfM;;AAgBPe,iBAAa,CAACC,CAAD,EAAGC,CAAH,EAAM;AACjB,UAAIC,SAAQ,GAAI,IAAIC,KAAJ,CAAUH,CAAV,CAAhB;;AACA,WAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,CAAf,EAAkBI,CAAC,EAAnB,EAAsB;AACpBF,iBAAS,CAACE,CAAD,CAAT,GAAe,IAAID,KAAJ,CAAUF,CAAV,CAAf;;AACA,aAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,CAAf,EAAkBI,CAAC,EAAnB,EAAuB;AACrBH,mBAAS,CAACE,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAAlB;AACF;AACF;;AACA,aAAOH,SAAP;AACD,KAzBM;;AA0BPI,WAAO,CAACJ,SAAD,EAAWF,CAAX,EAAc;AACnB,UAAIO,OAAO,GAAC,CAAZ;;AACA,WAAI,IAAIH,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,CAAd,EAAgBI,CAAC,EAAjB,EAAoB;AAClB,YAAGG,OAAM,GAAIC,IAAI,CAACC,GAAL,CAAS,GAAGP,SAAS,CAACE,CAAD,CAArB,CAAb,EAAuC;AACrCG,iBAAM,GAAIC,IAAI,CAACC,GAAL,CAAS,GAAGP,SAAS,CAACE,CAAD,CAArB,CAAV;AACF;AACF;;AACA,aAAOG,OAAP;AACD,KAlCM;;AAmCPG,gBAAY,CAACV,CAAD,EAAGC,CAAH,EAAM,CAElB;;AArCO,GAfI;AAsDbU,OAAK,EAAE;AACN3B,eAAW,GAAG;AACZa,aAAO,CAACC,GAAR,CAAY,KAAKd,WAAjB;AACF;;AAHM,GAtDM;;AA2Db4B,SAAO,GAAG;AACRC,eAAW,CAAC,MAAI;AACd,WAAK7B,WAAL,GAAmB,KAAKY,YAAL,EAAnB;AACD,KAFU,EAET,GAFS,CAAX;AAIA,QAAIkB,KAAI,GAAI,EAAZ;AACA,QAAIC,KAAI,GAAI,EAAZ;AAEA,QAAIC,UAAS,GAAI,IAAIb,KAAJ,EAAjB;AACA,QAAIc,UAAS,GAAI,IAAId,KAAJ,EAAjB;AACAa,cAAS,GAAI,KAAKjC,MAAL,CAAYmC,KAAZ,CAAkB,IAAlB,CAAb;;AACA,SAAK,IAAId,IAAI,CAAb,EAAgBA,IAAIY,UAAU,CAACG,MAA/B,EAAuCf,CAAC,EAAxC,EAA4C;AAC1Ca,gBAAU,CAACb,CAAD,CAAV,GAAgBY,UAAU,CAACZ,CAAD,CAAV,CAAcc,KAAd,CAAoB,GAApB,CAAhB;AACF;;AACA,UAAME,KAAI,GAAIzC,EAAE,CAAC0C,MAAH,CAAU,QAAV,EAAoBC,KAApB,CAA0B,cAA1B,EAA0C,OAA1C,CAAd;AACAF,SAAK,CAACG,MAAN,CAAa,MAAb,EACGC,IADH,CACQ,GADR,EACa,CADb,EAEGA,IAFH,CAEQ,GAFR,EAEa,CAFb,EAGGA,IAHH,CAGQ,OAHR,EAGiB,KAAKvC,KAHtB,EAIGuC,IAJH,CAIQ,QAJR,EAIkB,KAAKtC,MAJvB,EAKGoC,KALH,CAKS,MALT,EAKiB,KALjB,EAMGE,IANH,CAMQ,SANR,EAMmB,GANnB;;AAQA,SAAK,IAAIpB,IAAI,CAAb,EAAgBA,IAAIU,KAApB,EAA2BV,CAAC,EAA5B,EAAgC;AAC9BgB,WAAK,CAACG,MAAN,CAAa,MAAb,EACGC,IADH,CACQ,IADR,EACcpB,CAAC,GAAC,KAAKnB,KAAP,GAAa6B,KAD3B,EAEGU,IAFH,CAEQ,IAFR,EAEc,CAFd,EAGGA,IAHH,CAGQ,IAHR,EAGcpB,CAAC,GAAC,KAAKnB,KAAP,GAAa6B,KAH3B,EAIGU,IAJH,CAIQ,IAJR,EAIc,KAAKtC,MAJnB,EAKGoC,KALH,CAKS,QALT,EAKmB,MALnB,EAMGA,KANH,CAMS,cANT,EAMyB,KANzB;AAOF;;AACA,SAAK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIW,KAApB,EAA2BX,CAAC,EAA5B,EAAgC;AAC9BgB,WAAK,CAACG,MAAN,CAAa,MAAb,EACGC,IADH,CACQ,IADR,EACc,CADd,EAEGA,IAFH,CAEQ,IAFR,EAEcpB,CAAC,GAAC,KAAKlB,MAAP,GAAc6B,KAF5B,EAGGS,IAHH,CAGQ,IAHR,EAGc,KAAKvC,KAHnB,EAIGuC,IAJH,CAIQ,IAJR,EAIcpB,CAAC,GAAC,KAAKlB,MAAP,GAAc6B,KAJ5B,EAKGO,KALH,CAKS,QALT,EAKmB,MALnB,EAMGA,KANH,CAMS,cANT,EAMyB,KANzB;AAOF;;AACA,QAAIpB,SAAQ,GAAI,KAAKH,aAAL,CAAmBe,KAAnB,EAAyBC,KAAzB,CAAhB;AAGD;;AAvGY,CAAf","names":["csvFile","d3","name","components","data","myData","currentTime","width","height","created","methods","vid_play_pause","myVideo","document","getElementById","paused","play","pause","currentFrame","console","log","initPosInGrid","x","y","posInGrid","Array","i","j","findMax","tempMax","Math","max","calPosInGrid","watch","mounted","setInterval","gridX","gridY","dataArray1","dataArray2","split","length","mySvg","select","style","append","attr"],"sourceRoot":"","sources":["C:\\Users\\admin\\Desktop\\cctv\\cctvui\\src\\App.vue"],"sourcesContent":["<template>\n\n  <button type=\"button\" @click=\"vid_play_pause()\">Play/Pause</button>\n  <button type=\"button\" @click=\"currentFrame()\">frame?</button>\n  <div class=\"container\">\n    <!-- <canvas class=\"canvas\" id=\"myCanvas\" width=\"1520\" height=\"720\"></canvas> -->\n    <svg id=\"mySvg\" width=\"1520\" height=\"720\">\n    </svg>\n    <video class=\"video\" id=\"myVideo\" src=\"../src/assets/20220408155705.webm\" width=\"1520\" height=\"720\"></video>\n  </div>\n  \n</template>\n\n<script>\nimport csvFile from 'raw-loader!./assets/data_0408_152650.csv';\nimport * as d3 from 'd3'; \n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      myData: [],\n      currentTime:0,\n      width: 1520,\n      height: 720,\n    }\n  },\n  created() {\n    this.myData = csvFile\n  },\n  methods: {\n    vid_play_pause: () =>{\n      let myVideo = document.getElementById(\"myVideo\"); \n      if (myVideo.paused) { \n        myVideo.play(); \n        } else { \n          myVideo.pause();\n        }\n\n    },\n    currentFrame: () => {\n      let myVideo = document.getElementById(\"myVideo\"); \n      let currentTime = myVideo.currentTime\n      console.log(currentTime)\n        return currentTime\n    },\n    initPosInGrid(x,y) {\n      let posInGrid = new Array(x);\n      for(let i=0; i<x; i++){\n        posInGrid[i] = new Array(y);\n        for(let j=0; j<y; j++) {\n          posInGrid[i][j] = 0;\n        }\n      }\n      return posInGrid\n    },\n    findMax(posInGrid,x) {\n      let tempMax=0;\n      for(let i=0;i<x;i++){\n        if(tempMax < Math.max(...posInGrid[i])){\n          tempMax = Math.max(...posInGrid[i])\n        }\n      }\n      return tempMax\n    },\n    calPosInGrid(x,y) {\n      \n    }\n  },\n  watch: {\n   currentTime() {\n     console.log(this.currentTime)\n   }\n  },\n  mounted() {\n    setInterval(()=>{\n      this.currentTime = this.currentFrame()\n    },200)\n\n    let gridX = 32;\n    let gridY = 16;\n\n    let dataArray1 = new Array\n    let dataArray2 = new Array\n    dataArray1 = this.myData.split('\\n')\n    for (let i = 0; i < dataArray1.length; i++) {\n      dataArray2[i] = dataArray1[i].split(',')\n    }\n    const mySvg = d3.select(\"#mySvg\").style(\"border-width\", \"0.5px\");\n    mySvg.append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", this.width)\n      .attr(\"height\", this.height)\n      .style(\"fill\", \"150\")\n      .attr(\"opacity\", 0.5)\n\n    for (let i = 0; i < gridX; i++) {\n      mySvg.append(\"line\")\n        .attr(\"x1\", i*this.width/gridX)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", i*this.width/gridX)\n        .attr(\"y2\", this.height)\n        .style(\"stroke\", \"grey\")\n        .style(\"stroke-width\", \"1px\")\n    }\n    for (let i = 0; i < gridY; i++) {\n      mySvg.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", i*this.height/gridY)\n        .attr(\"x2\", this.width)\n        .attr(\"y2\", i*this.height/gridY)\n        .style(\"stroke\", \"grey\")\n        .style(\"stroke-width\", \"1px\")\n    }\n    let posInGrid = this.initPosInGrid(gridX,gridY)\n\n    \n  },\n    \n\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.container {\n    position: relative;\n  }\n#mySvg {\n  position: absolute;\n  top:0;\n  left:0;\n  z-index: 10;\n}\n.video {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n/* .canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  background-color:rgba(70, 40, 151, 0.5);\n} */\n</style>\n"]},"metadata":{},"sourceType":"module"}